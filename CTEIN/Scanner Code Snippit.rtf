{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red92\green38\blue153;\red0\green116\blue0;
\red63\green110\blue116;\red46\green13\blue110;\red38\green71\blue75;\red196\green26\blue22;\red28\green0\blue207;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 import\cf0  AVFoundation\
\
\cf2 class\cf0  ViewController: \cf3 UIViewController\cf0 , \cf3 AVCaptureMetadataOutputObjectsDelegate\cf0  \{\
    \
    \cf2 let\cf0  session = \cf3 AVCaptureSession\cf0 ()\
    \cf2 var\cf0  previewLayer : \cf3 AVCaptureVideoPreviewLayer\cf0 ?\
    \cf2 var\cf0   identifiedBorder : \cf3 DiscoveredBarCodeView\cf0 ?\
\
    \cf2 var\cf0  timer : \cf3 NSTimer\cf0 ?\
    \
    \cf4 /* Add the preview layer here */\cf0 \
    \cf2 func\cf0  addPreviewLayer() \{\
        \cf5 previewLayer\cf0  = \cf3 AVCaptureVideoPreviewLayer\cf0 (session: \cf5 session\cf0 )\
        \cf5 previewLayer\cf0 ?.\cf3 videoGravity\cf0  = \cf3 AVLayerVideoGravityResizeAspectFill\cf0 \
        \cf5 previewLayer\cf0 ?.\cf3 bounds\cf0  = \cf2 self\cf0 .\cf3 view\cf0 .\cf3 bounds\cf0 \
        \cf5 previewLayer\cf0 ?.\cf3 position\cf0  = \cf6 CGPointMake\cf0 (\cf6 CGRectGetMidX\cf0 (\cf2 self\cf0 .\cf3 view\cf0 .\cf3 bounds\cf0 ), \cf6 CGRectGetMidY\cf0 (\cf2 self\cf0 .\cf3 view\cf0 .\cf3 bounds\cf0 ))\
        \cf2 self\cf0 .view.layer.addSublayer(previewLayer)\
    \}\
    \
    \cf2 override\cf0  \cf2 func\cf0  viewDidLoad() \{\
        \cf2 super\cf0 .\cf6 viewDidLoad\cf0 ()\
        \cf2 let\cf0  captureDevice = \cf3 AVCaptureDevice\cf0 .\cf6 defaultDeviceWithMediaType\cf0 (\cf3 AVMediaTypeVideo\cf0 )\
        \cf2 var\cf0  error : \cf3 NSError\cf0 ?\
        \cf2 let\cf0  inputDevice = \cf3 AVCaptureDeviceInput\cf0 (device: captureDevice, error: &amp;error)\
        \
        \cf2 if\cf0  \cf2 let\cf0  inp = inputDevice \{\
            session.addInput(inp)\
        \} \cf2 else\cf0  \{\
            println(error)\
        \}\
        \cf7 addPreviewLayer\cf0 ()\
        \
        identifiedBorder = DiscoveredBarCodeView(frame: \cf2 self\cf0 .view.bounds)\
        identifiedBorder?.backgroundColor = \cf3 UIColor\cf0 .clearColor()\
        identifiedBorder?.hidden = \cf2 true\cf0 ;\
        \cf2 self\cf0 .\cf3 view\cf0 .addSubview(identifiedBorder!)\
        \
        \
        \cf4 /* Check for metadata */\cf0 \
        \cf2 let\cf0  output = \cf3 AVCaptureMetadataOutput\cf0 ()\
        \cf5 session\cf0 .\cf6 addOutput\cf0 (output)\
        output.\cf3 metadataObjectTypes\cf0  = output.\cf3 availableMetadataObjectTypes\cf0 \
        println(output.\cf3 availableMetadataObjectTypes\cf0 )\
        output.\cf6 setMetadataObjectsDelegate\cf0 (\cf2 self\cf0 , queue: \cf6 dispatch_get_main_queue\cf0 ())\
        \cf5 session\cf0 .\cf6 startRunning\cf0 ()\
    \}\
    \
    \cf2 override\cf0  \cf2 func\cf0  viewWillAppear(animated: \cf3 Bool\cf0 ) \{\
        \
    \}\
    \cf2 override\cf0  \cf2 func\cf0  didReceiveMemoryWarning() \{\
        \cf2 super\cf0 .\cf6 didReceiveMemoryWarning\cf0 ()\
    \}\
    \
    \cf2 override\cf0  \cf2 func\cf0  viewWillDisappear(animated: \cf3 Bool\cf0 ) \{\
        \cf5 session\cf0 .\cf6 stopRunning\cf0 ()\
    \}\
    \
    \cf2 func\cf0  translatePoints(points : [\cf3 AnyObject\cf0 ], fromView : \cf3 UIView\cf0 , toView: \cf3 UIView\cf0 ) -&gt; [CGPoint] \{\
    \cf2 var\cf0  translatedPoints : [CGPoint] = []\
    \cf2 for\cf0  point \cf2 in\cf0  points \{\
    \cf2 var\cf0  dict = point \cf2 as\cf0  NSDictionary\
    \cf2 let\cf0  x = CGFloat((dict.objectForKey(\cf8 "X"\cf0 ) \cf2 as\cf0  NSNumber).floatValue)\
    \cf2 let\cf0  y = CGFloat((dict.objectForKey(\cf8 "Y"\cf0 ) \cf2 as\cf0  NSNumber).floatValue)\
    \cf2 let\cf0  curr = CGPointMake(x, y)\
    \cf2 let\cf0  currFinal = fromView.convertPoint(curr, toView: toView)\
    translatedPoints.append(currFinal)\
    \}\
    \cf2 return\cf0  translatedPoints\
    \}\
    \
    \cf2 func\cf0  startTimer() \{\
        \cf2 if\cf0  \cf5 timer\cf0 ?.\cf3 valid\cf0  != \cf2 true\cf0  \{\
            \cf5 timer\cf0  = \cf3 NSTimer\cf0 .\cf6 scheduledTimerWithTimeInterval\cf0 (\cf9 0.2\cf0 , target: \cf2 self\cf0 , selector: \cf8 "removeBorder"\cf0 , userInfo: \cf2 nil\cf0 , repeats: \cf2 false\cf0 )\
        \} \cf2 else\cf0  \{\
            \cf5 timer\cf0 ?.\cf6 invalidate\cf0 ()\
        \}\
    \}\
    \
    \cf2 func\cf0  removeBorder() \{\
        \cf4 /* Remove the identified border */\cf0 \
        \cf2 self\cf0 .identifiedBorder?.hidden = \cf2 true\cf0 \
    \}\
    \
    \cf2 func\cf0  captureOutput(captureOutput: \cf3 AVCaptureOutput\cf0 !, didOutputMetadataObjects metadataObjects: [\cf3 AnyObject\cf0 ]!, fromConnection connection: \cf3 AVCaptureConnection\cf0 !) \{\
        \cf2 for\cf0  data \cf2 in\cf0  metadataObjects \{\
            \cf2 let\cf0  metaData = data \cf2 as\cf0  \cf3 AVMetadataObject\cf0 \
            \cf2 let\cf0  transformed = previewLayer?.transformedMetadataObjectForMetadataObject(metaData) \cf2 as\cf0 ? \cf3 AVMetadataMachineReadableCodeObject\cf0 \
            \cf2 if\cf0  \cf2 let\cf0  unwraped = transformed \{\
                identifiedBorder?.frame = unwraped.bounds\
                identifiedBorder?.hidden = \cf2 false\cf0 \
                \cf2 let\cf0  identifiedCorners = \cf2 self\cf0 .translatePoints(unwraped.corners, fromView: \cf2 self\cf0 .view, toView: \cf2 self\cf0 .identifiedBorder!)\
                identifiedBorder?.drawBorder(identifiedCorners)\
                \cf2 self\cf0 .identifiedBorder?.hidden = \cf2 false\cf0 \
                \cf2 self\cf0 .\cf7 startTimer\cf0 ()\
                \
            \}\
        \}\
    \}\
\}\
}